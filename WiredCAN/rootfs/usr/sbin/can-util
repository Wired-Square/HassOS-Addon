#!/bin/bash

#
# CAN Configuration tool
#
# (c) 2023 Wired Square Pty Ltd
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
# LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

ERROR=0

function error_check () {
  #
  # Increment global var on error
  #

  if [ $? -ne 0 ]; then
    ((ERROR++))
  fi

  return 1
}


function control_can () {
  #
  # Control the CAN interfaces
  #

  CAN_INTERFACES=()

  case $2 in
    ""|all)
      CAN_INTERFACES="$(enum_can)"
      ;;
    *)
      CAN_INTERFACES="$2"
      ;;
  esac

  case $1 in
    configure)
      for interface in $CAN_INTERFACES; do

        if can_state_up "$interface"; then
          control_can disable "$interface"
        fi
        ip link set "${interface}" type can bitrate 50000
        error_check
        ip link set "${interface}" type can restart-ms 100
        error_check
        ip link set "${interface}" txqueuelen 1000
        error_check
        control_can enable "$interface"
        error_check
      done
      ;;
    enable)
      for interface in $CAN_INTERFACES; do
        ip link set "${interface}" up
        error_check
      done
      ;;
    disable)
      for interface in $CAN_INTERFACES; do
        ip link set "${interface}" down
        error_check
      done
      ;;
    status)
      for interface in $CAN_INTERFACES; do
        ip link show "${interface}"
        error_check
      done
      ;;
    check_can_up)
      for interface in $CAN_INTERFACES; do
        can_state_up "${interface}"
        error_check
      done
      ;;
    check_can_down)
      for interface in $CAN_INTERFACES; do
        can_state_up "${interface}"
        error_check
      done
      ;;
    *)
      echo "Error: Unknown control command: $1"
      exit 1
      ;;
  esac

  if [ $ERROR -ne 0 ]; then
    echo "Error: Something bad happened in the [ $1 ] step."
    exit $ERROR
  fi

}


function can_state () {
  #
  # Checks a single interface and returns the state
  #

  interface=$1
  state=$(ip link show "$interface" | grep "state" | awk '{print $9}')
  error_check

  echo "$state"
}



function check_can_up () {
  #
  # Checks a single interface if it is up and returns a boolean
  #

  interface=$1

  if [[ "$(canstate $interface)" == "UP" ]]; then
    return 1
  else
    return 0
  fi
}


function enum_can () {
  #
  # Enumerate the available can interfaces
  #

  CAN_INTERFACES=()

  for interface in /sys/class/net/*; do
    if [[ $(basename "$interface") =~ ^can[0-9]+$ ]]; then
      CAN_INTERFACES+=($(basename "$interface"))
    fi
  done

  echo "${CAN_INTERFACES[*]}"
}

case $1 in

  auto)
    control_can configure "$2"
    control_can enable "$2"
    ;;
  configure)
    control_can configure "$2"
    ;;
  enum)
    enum_can
    ;;
  enable)
    control_can enable "$2"
    ;;
  disable)
    control_can disable "$2"
    ;;
  status)
    control_can status "$2"
    ;;
  *)
    echo "Usage:"
    echo "$0 [ auto | configure [ candev ] | enum | enable [ candev ] | disable [ candev ] | status [ candev ]"
    echo ""
    echo "Note: leaving the candev blank, or using the \"all\" keyword will attempt to enumerate all available can devices"
    ;;
esac
